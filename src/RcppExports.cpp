// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Loglik
double Loglik(int K, int nD, arma::vec& mapping, arma::vec& paraOpt, arma::vec& paraFixe, arma::vec& posfix, arma::vec& paras_k, arma::mat& sequence, int type_int, arma::vec& ind_seq_i, int MCnr, arma::vec& nmes, arma::vec& m_is, arma::mat& Mod_MatrixY, arma::mat& Mod_MatrixYprim, arma::vec& df, arma::mat& x, arma::mat& z, arma::vec& q, int nb_paraD, arma::mat& x0, arma::mat& z0, arma::vec& q0, bool cholesky, arma::mat& data_surv, arma::mat& data_surv_intY, arma::vec& nYsurv, int basehaz, arma::vec& knots_surv, arma::vec& np_surv, bool survival, int assoc, bool truncation, int nE, arma::mat& Xsurv1, arma::mat& Xsurv2, arma::vec& if_link, arma::vec& zitr, arma::vec& ide, arma::vec& tau, arma::vec& tau_is, arma::mat& modA_mat, double DeltaT, int ii);
RcppExport SEXP _DynNet_Loglik(SEXP KSEXP, SEXP nDSEXP, SEXP mappingSEXP, SEXP paraOptSEXP, SEXP paraFixeSEXP, SEXP posfixSEXP, SEXP paras_kSEXP, SEXP sequenceSEXP, SEXP type_intSEXP, SEXP ind_seq_iSEXP, SEXP MCnrSEXP, SEXP nmesSEXP, SEXP m_isSEXP, SEXP Mod_MatrixYSEXP, SEXP Mod_MatrixYprimSEXP, SEXP dfSEXP, SEXP xSEXP, SEXP zSEXP, SEXP qSEXP, SEXP nb_paraDSEXP, SEXP x0SEXP, SEXP z0SEXP, SEXP q0SEXP, SEXP choleskySEXP, SEXP data_survSEXP, SEXP data_surv_intYSEXP, SEXP nYsurvSEXP, SEXP basehazSEXP, SEXP knots_survSEXP, SEXP np_survSEXP, SEXP survivalSEXP, SEXP assocSEXP, SEXP truncationSEXP, SEXP nESEXP, SEXP Xsurv1SEXP, SEXP Xsurv2SEXP, SEXP if_linkSEXP, SEXP zitrSEXP, SEXP ideSEXP, SEXP tauSEXP, SEXP tau_isSEXP, SEXP modA_matSEXP, SEXP DeltaTSEXP, SEXP iiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type nD(nDSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mapping(mappingSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type paraOpt(paraOptSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type paraFixe(paraFixeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type posfix(posfixSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type paras_k(paras_kSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< int >::type type_int(type_intSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ind_seq_i(ind_seq_iSEXP);
    Rcpp::traits::input_parameter< int >::type MCnr(MCnrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nmes(nmesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type m_is(m_isSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Mod_MatrixY(Mod_MatrixYSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Mod_MatrixYprim(Mod_MatrixYprimSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type nb_paraD(nb_paraDSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q0(q0SEXP);
    Rcpp::traits::input_parameter< bool >::type cholesky(choleskySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data_surv(data_survSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data_surv_intY(data_surv_intYSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nYsurv(nYsurvSEXP);
    Rcpp::traits::input_parameter< int >::type basehaz(basehazSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type knots_surv(knots_survSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type np_surv(np_survSEXP);
    Rcpp::traits::input_parameter< bool >::type survival(survivalSEXP);
    Rcpp::traits::input_parameter< int >::type assoc(assocSEXP);
    Rcpp::traits::input_parameter< bool >::type truncation(truncationSEXP);
    Rcpp::traits::input_parameter< int >::type nE(nESEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xsurv1(Xsurv1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xsurv2(Xsurv2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type if_link(if_linkSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type zitr(zitrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ide(ideSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_is(tau_isSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type modA_mat(modA_matSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< int >::type ii(iiSEXP);
    rcpp_result_gen = Rcpp::wrap(Loglik(K, nD, mapping, paraOpt, paraFixe, posfix, paras_k, sequence, type_int, ind_seq_i, MCnr, nmes, m_is, Mod_MatrixY, Mod_MatrixYprim, df, x, z, q, nb_paraD, x0, z0, q0, cholesky, data_surv, data_surv_intY, nYsurv, basehaz, knots_surv, np_surv, survival, assoc, truncation, nE, Xsurv1, Xsurv2, if_link, zitr, ide, tau, tau_is, modA_mat, DeltaT, ii));
    return rcpp_result_gen;
END_RCPP
}
// Loglik2
double Loglik2(int K, int nD, arma::vec& mapping, arma::vec& paraOpt, arma::vec& paraFixe, arma::vec& posfix, arma::vec& paras_k, arma::mat& sequence, int type_int, arma::vec& ind_seq_i, int MCnr, arma::vec& nmes, arma::vec& m_is, arma::mat& Mod_MatrixY, arma::mat& Mod_MatrixYprim, arma::vec& df, arma::mat& x, arma::mat& z, arma::vec& q, int nb_paraD, arma::mat& x0, arma::mat& z0, arma::vec& q0, bool cholesky, arma::mat& data_surv, arma::mat& data_surv_intY, arma::vec& nYsurv, int basehaz, arma::vec& knots_surv, arma::vec& np_surv, bool survival, int assoc, bool truncation, int nE, arma::mat& Xsurv1, arma::mat& Xsurv2, arma::vec& if_link, arma::vec& zitr, arma::vec& ide, arma::vec& tau, arma::vec& tau_is, arma::mat& modA_mat, double DeltaT, int ii, arma::vec& ui);
RcppExport SEXP _DynNet_Loglik2(SEXP KSEXP, SEXP nDSEXP, SEXP mappingSEXP, SEXP paraOptSEXP, SEXP paraFixeSEXP, SEXP posfixSEXP, SEXP paras_kSEXP, SEXP sequenceSEXP, SEXP type_intSEXP, SEXP ind_seq_iSEXP, SEXP MCnrSEXP, SEXP nmesSEXP, SEXP m_isSEXP, SEXP Mod_MatrixYSEXP, SEXP Mod_MatrixYprimSEXP, SEXP dfSEXP, SEXP xSEXP, SEXP zSEXP, SEXP qSEXP, SEXP nb_paraDSEXP, SEXP x0SEXP, SEXP z0SEXP, SEXP q0SEXP, SEXP choleskySEXP, SEXP data_survSEXP, SEXP data_surv_intYSEXP, SEXP nYsurvSEXP, SEXP basehazSEXP, SEXP knots_survSEXP, SEXP np_survSEXP, SEXP survivalSEXP, SEXP assocSEXP, SEXP truncationSEXP, SEXP nESEXP, SEXP Xsurv1SEXP, SEXP Xsurv2SEXP, SEXP if_linkSEXP, SEXP zitrSEXP, SEXP ideSEXP, SEXP tauSEXP, SEXP tau_isSEXP, SEXP modA_matSEXP, SEXP DeltaTSEXP, SEXP iiSEXP, SEXP uiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type nD(nDSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mapping(mappingSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type paraOpt(paraOptSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type paraFixe(paraFixeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type posfix(posfixSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type paras_k(paras_kSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< int >::type type_int(type_intSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ind_seq_i(ind_seq_iSEXP);
    Rcpp::traits::input_parameter< int >::type MCnr(MCnrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nmes(nmesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type m_is(m_isSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Mod_MatrixY(Mod_MatrixYSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Mod_MatrixYprim(Mod_MatrixYprimSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type nb_paraD(nb_paraDSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q0(q0SEXP);
    Rcpp::traits::input_parameter< bool >::type cholesky(choleskySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data_surv(data_survSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data_surv_intY(data_surv_intYSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nYsurv(nYsurvSEXP);
    Rcpp::traits::input_parameter< int >::type basehaz(basehazSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type knots_surv(knots_survSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type np_surv(np_survSEXP);
    Rcpp::traits::input_parameter< bool >::type survival(survivalSEXP);
    Rcpp::traits::input_parameter< int >::type assoc(assocSEXP);
    Rcpp::traits::input_parameter< bool >::type truncation(truncationSEXP);
    Rcpp::traits::input_parameter< int >::type nE(nESEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xsurv1(Xsurv1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xsurv2(Xsurv2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type if_link(if_linkSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type zitr(zitrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ide(ideSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_is(tau_isSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type modA_mat(modA_matSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< int >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ui(uiSEXP);
    rcpp_result_gen = Rcpp::wrap(Loglik2(K, nD, mapping, paraOpt, paraFixe, posfix, paras_k, sequence, type_int, ind_seq_i, MCnr, nmes, m_is, Mod_MatrixY, Mod_MatrixYprim, df, x, z, q, nb_paraD, x0, z0, q0, cholesky, data_surv, data_surv_intY, nYsurv, basehaz, knots_surv, np_surv, survival, assoc, truncation, nE, Xsurv1, Xsurv2, if_link, zitr, ide, tau, tau_is, modA_mat, DeltaT, ii, ui));
    return rcpp_result_gen;
END_RCPP
}
// pred
arma::mat pred(int K, int nD, arma::vec& mapping, arma::vec& paras, arma::vec& m_is, arma::mat& Mod_MatrixY, arma::vec df, arma::mat& x, arma::mat& z, arma::vec& q, bool cholesky, int nb_paraD, arma::mat& x0, arma::mat& z0, arma::vec& q0, arma::vec if_link, arma::vec tau, arma::vec& tau_is, arma::mat& modA_mat, double DeltaT, int MCnr, arma::vec minY, arma::vec maxY, List& knots, arma::vec degree, double epsPred, arma::mat& ui_hat, int nE);
RcppExport SEXP _DynNet_pred(SEXP KSEXP, SEXP nDSEXP, SEXP mappingSEXP, SEXP parasSEXP, SEXP m_isSEXP, SEXP Mod_MatrixYSEXP, SEXP dfSEXP, SEXP xSEXP, SEXP zSEXP, SEXP qSEXP, SEXP choleskySEXP, SEXP nb_paraDSEXP, SEXP x0SEXP, SEXP z0SEXP, SEXP q0SEXP, SEXP if_linkSEXP, SEXP tauSEXP, SEXP tau_isSEXP, SEXP modA_matSEXP, SEXP DeltaTSEXP, SEXP MCnrSEXP, SEXP minYSEXP, SEXP maxYSEXP, SEXP knotsSEXP, SEXP degreeSEXP, SEXP epsPredSEXP, SEXP ui_hatSEXP, SEXP nESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type nD(nDSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mapping(mappingSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type paras(parasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type m_is(m_isSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Mod_MatrixY(Mod_MatrixYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type cholesky(choleskySEXP);
    Rcpp::traits::input_parameter< int >::type nb_paraD(nb_paraDSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q0(q0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type if_link(if_linkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_is(tau_isSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type modA_mat(modA_matSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< int >::type MCnr(MCnrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type minY(minYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type maxY(maxYSEXP);
    Rcpp::traits::input_parameter< List& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< double >::type epsPred(epsPredSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ui_hat(ui_hatSEXP);
    Rcpp::traits::input_parameter< int >::type nE(nESEXP);
    rcpp_result_gen = Rcpp::wrap(pred(K, nD, mapping, paras, m_is, Mod_MatrixY, df, x, z, q, cholesky, nb_paraD, x0, z0, q0, if_link, tau, tau_is, modA_mat, DeltaT, MCnr, minY, maxY, knots, degree, epsPred, ui_hat, nE));
    return rcpp_result_gen;
END_RCPP
}
// pred_bis
arma::mat pred_bis(int K, int nD, arma::vec& mapping, arma::vec& paras, arma::vec& m_is, arma::mat& Mod_MatrixY, arma::vec df, arma::mat& x, arma::mat& z, arma::vec& q, bool cholesky, int nb_paraD, arma::mat& x0, arma::mat& z0, arma::vec& q0, arma::vec if_link, arma::vec tau, arma::vec& tau_is, arma::mat& modA_mat, double DeltaT, int MCnr, arma::vec minY, arma::vec maxY, List& knots, arma::vec degree, double epsPred);
RcppExport SEXP _DynNet_pred_bis(SEXP KSEXP, SEXP nDSEXP, SEXP mappingSEXP, SEXP parasSEXP, SEXP m_isSEXP, SEXP Mod_MatrixYSEXP, SEXP dfSEXP, SEXP xSEXP, SEXP zSEXP, SEXP qSEXP, SEXP choleskySEXP, SEXP nb_paraDSEXP, SEXP x0SEXP, SEXP z0SEXP, SEXP q0SEXP, SEXP if_linkSEXP, SEXP tauSEXP, SEXP tau_isSEXP, SEXP modA_matSEXP, SEXP DeltaTSEXP, SEXP MCnrSEXP, SEXP minYSEXP, SEXP maxYSEXP, SEXP knotsSEXP, SEXP degreeSEXP, SEXP epsPredSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type nD(nDSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mapping(mappingSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type paras(parasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type m_is(m_isSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Mod_MatrixY(Mod_MatrixYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type cholesky(choleskySEXP);
    Rcpp::traits::input_parameter< int >::type nb_paraD(nb_paraDSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q0(q0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type if_link(if_linkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_is(tau_isSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type modA_mat(modA_matSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< int >::type MCnr(MCnrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type minY(minYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type maxY(maxYSEXP);
    Rcpp::traits::input_parameter< List& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< double >::type epsPred(epsPredSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_bis(K, nD, mapping, paras, m_is, Mod_MatrixY, df, x, z, q, cholesky, nb_paraD, x0, z0, q0, if_link, tau, tau_is, modA_mat, DeltaT, MCnr, minY, maxY, knots, degree, epsPred));
    return rcpp_result_gen;
END_RCPP
}
// pred0
arma::mat pred0(int K, int nD, arma::vec& mapping, arma::vec& paras, arma::vec& m_is, arma::mat& Mod_MatrixY, arma::vec df, arma::mat& x, arma::mat& z, arma::vec& q, int nb_paraD, arma::mat& x0, arma::mat& z0, arma::vec& q0, arma::vec if_link, arma::vec tau, arma::vec& tau_is, arma::mat& modA_mat, double DeltaT, int MCnr, arma::vec minY, arma::vec maxY, List& knots, arma::vec degree, double epsPred);
RcppExport SEXP _DynNet_pred0(SEXP KSEXP, SEXP nDSEXP, SEXP mappingSEXP, SEXP parasSEXP, SEXP m_isSEXP, SEXP Mod_MatrixYSEXP, SEXP dfSEXP, SEXP xSEXP, SEXP zSEXP, SEXP qSEXP, SEXP nb_paraDSEXP, SEXP x0SEXP, SEXP z0SEXP, SEXP q0SEXP, SEXP if_linkSEXP, SEXP tauSEXP, SEXP tau_isSEXP, SEXP modA_matSEXP, SEXP DeltaTSEXP, SEXP MCnrSEXP, SEXP minYSEXP, SEXP maxYSEXP, SEXP knotsSEXP, SEXP degreeSEXP, SEXP epsPredSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type nD(nDSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mapping(mappingSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type paras(parasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type m_is(m_isSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Mod_MatrixY(Mod_MatrixYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type nb_paraD(nb_paraDSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type q0(q0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type if_link(if_linkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_is(tau_isSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type modA_mat(modA_matSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< int >::type MCnr(MCnrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type minY(minYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type maxY(maxYSEXP);
    Rcpp::traits::input_parameter< List& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< double >::type epsPred(epsPredSEXP);
    rcpp_result_gen = Rcpp::wrap(pred0(K, nD, mapping, paras, m_is, Mod_MatrixY, df, x, z, q, nb_paraD, x0, z0, q0, if_link, tau, tau_is, modA_mat, DeltaT, MCnr, minY, maxY, knots, degree, epsPred));
    return rcpp_result_gen;
END_RCPP
}
// vectorise
arma::vec vectorise(arma::mat& M);
RcppExport SEXP _DynNet_vectorise(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(vectorise(M));
    return rcpp_result_gen;
END_RCPP
}
// KmatDiag
arma::mat KmatDiag(arma::vec& Kvector);
RcppExport SEXP _DynNet_KmatDiag(SEXP KvectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Kvector(KvectorSEXP);
    rcpp_result_gen = Rcpp::wrap(KmatDiag(Kvector));
    return rcpp_result_gen;
END_RCPP
}
// DparChol
arma::mat DparChol(int q, arma::vec& qvector);
RcppExport SEXP _DynNet_DparChol(SEXP qSEXP, SEXP qvectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type qvector(qvectorSEXP);
    rcpp_result_gen = Rcpp::wrap(DparChol(q, qvector));
    return rcpp_result_gen;
END_RCPP
}
// vecaijt
arma::vec vecaijt(int K, int t, arma::vec& vec_alpha_ij, arma::mat& modA_mat);
RcppExport SEXP _DynNet_vecaijt(SEXP KSEXP, SEXP tSEXP, SEXP vec_alpha_ijSEXP, SEXP modA_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type vec_alpha_ij(vec_alpha_ijSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type modA_mat(modA_matSEXP);
    rcpp_result_gen = Rcpp::wrap(vecaijt(K, t, vec_alpha_ij, modA_mat));
    return rcpp_result_gen;
END_RCPP
}
// ConstrA
arma::mat ConstrA(int K, int t, double DeltaT, arma::vec& vec_alpha_ij, arma::mat& modA_mat);
RcppExport SEXP _DynNet_ConstrA(SEXP KSEXP, SEXP tSEXP, SEXP DeltaTSEXP, SEXP vec_alpha_ijSEXP, SEXP modA_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type vec_alpha_ij(vec_alpha_ijSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type modA_mat(modA_matSEXP);
    rcpp_result_gen = Rcpp::wrap(ConstrA(K, t, DeltaT, vec_alpha_ij, modA_mat));
    return rcpp_result_gen;
END_RCPP
}
// GmatA0totaui
arma::mat GmatA0totaui(int K, arma::vec& vec_alpha_ij, arma::vec& tau_i, double DeltaT, arma::mat modA_mat);
RcppExport SEXP _DynNet_GmatA0totaui(SEXP KSEXP, SEXP vec_alpha_ijSEXP, SEXP tau_iSEXP, SEXP DeltaTSEXP, SEXP modA_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type vec_alpha_ij(vec_alpha_ijSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_i(tau_iSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type modA_mat(modA_matSEXP);
    rcpp_result_gen = Rcpp::wrap(GmatA0totaui(K, vec_alpha_ij, tau_i, DeltaT, modA_mat));
    return rcpp_result_gen;
END_RCPP
}
// ProdA
arma::mat ProdA(int K, int t2, int t1, double DeltaT, arma::vec& vec_alpha_ij, arma::mat& modA_mat);
RcppExport SEXP _DynNet_ProdA(SEXP KSEXP, SEXP t2SEXP, SEXP t1SEXP, SEXP DeltaTSEXP, SEXP vec_alpha_ijSEXP, SEXP modA_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< int >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type vec_alpha_ij(vec_alpha_ijSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type modA_mat(modA_matSEXP);
    rcpp_result_gen = Rcpp::wrap(ProdA(K, t2, t1, DeltaT, vec_alpha_ij, modA_mat));
    return rcpp_result_gen;
END_RCPP
}
// GmatprodAstotau
arma::mat GmatprodAstotau(int K, arma::vec& vec_alpha_ij, arma::vec& tau, int t_ini, double DeltaT, arma::mat modA_mat);
RcppExport SEXP _DynNet_GmatprodAstotau(SEXP KSEXP, SEXP vec_alpha_ijSEXP, SEXP tauSEXP, SEXP t_iniSEXP, SEXP DeltaTSEXP, SEXP modA_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type vec_alpha_ij(vec_alpha_ijSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type t_ini(t_iniSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type modA_mat(modA_matSEXP);
    rcpp_result_gen = Rcpp::wrap(GmatprodAstotau(K, vec_alpha_ij, tau, t_ini, DeltaT, modA_mat));
    return rcpp_result_gen;
END_RCPP
}
// tsGmatprodA0totau
arma::mat tsGmatprodA0totau(int K, arma::vec& vec_alpha_ij, arma::vec& tau, double DeltaT, arma::mat modA_mat);
RcppExport SEXP _DynNet_tsGmatprodA0totau(SEXP KSEXP, SEXP vec_alpha_ijSEXP, SEXP tauSEXP, SEXP DeltaTSEXP, SEXP modA_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type vec_alpha_ij(vec_alpha_ijSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type modA_mat(modA_matSEXP);
    rcpp_result_gen = Rcpp::wrap(tsGmatprodA0totau(K, vec_alpha_ij, tau, DeltaT, modA_mat));
    return rcpp_result_gen;
END_RCPP
}
// compoYiNA
arma::vec compoYiNA(arma::mat& Yi);
RcppExport SEXP _DynNet_compoYiNA(SEXP YiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Yi(YiSEXP);
    rcpp_result_gen = Rcpp::wrap(compoYiNA(Yi));
    return rcpp_result_gen;
END_RCPP
}
// YiwoNA
arma::vec YiwoNA(arma::vec Yi);
RcppExport SEXP _DynNet_YiwoNA(SEXP YiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Yi(YiSEXP);
    rcpp_result_gen = Rcpp::wrap(YiwoNA(Yi));
    return rcpp_result_gen;
END_RCPP
}
// matNui
arma::mat matNui(int nD, arma::vec& tau_i, double DeltaT, arma::mat& x0i, arma::colvec& alpha_mu0, arma::mat& xi, arma::colvec& alpha_mu, arma::mat& G_mat_A_0_to_tau_i);
RcppExport SEXP _DynNet_matNui(SEXP nDSEXP, SEXP tau_iSEXP, SEXP DeltaTSEXP, SEXP x0iSEXP, SEXP alpha_mu0SEXP, SEXP xiSEXP, SEXP alpha_muSEXP, SEXP G_mat_A_0_to_tau_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nD(nDSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_i(tau_iSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0i(x0iSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_mu0(alpha_mu0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G_mat_A_0_to_tau_i(G_mat_A_0_to_tau_iSEXP);
    rcpp_result_gen = Rcpp::wrap(matNui(nD, tau_i, DeltaT, x0i, alpha_mu0, xi, alpha_mu, G_mat_A_0_to_tau_i));
    return rcpp_result_gen;
END_RCPP
}
// matYtild_ui
arma::mat matYtild_ui(int nD, arma::vec& tau_i, double DeltaT, arma::mat& x0i, arma::colvec& alpha_mu0, arma::mat& xi, arma::colvec& alpha_mu, arma::mat& G_mat_A_0_to_tau_i, arma::mat& zi, arma::colvec& ui, arma::colvec& vi);
RcppExport SEXP _DynNet_matYtild_ui(SEXP nDSEXP, SEXP tau_iSEXP, SEXP DeltaTSEXP, SEXP x0iSEXP, SEXP alpha_mu0SEXP, SEXP xiSEXP, SEXP alpha_muSEXP, SEXP G_mat_A_0_to_tau_iSEXP, SEXP ziSEXP, SEXP uiSEXP, SEXP viSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nD(nDSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_i(tau_iSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0i(x0iSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_mu0(alpha_mu0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G_mat_A_0_to_tau_i(G_mat_A_0_to_tau_iSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type zi(ziSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type ui(uiSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type vi(viSEXP);
    rcpp_result_gen = Rcpp::wrap(matYtild_ui(nD, tau_i, DeltaT, x0i, alpha_mu0, xi, alpha_mu, G_mat_A_0_to_tau_i, zi, ui, vi));
    return rcpp_result_gen;
END_RCPP
}
// f_Yi_r_NA_by0
arma::mat f_Yi_r_NA_by0(arma::mat& Yi);
RcppExport SEXP _DynNet_f_Yi_r_NA_by0(SEXP YiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Yi(YiSEXP);
    rcpp_result_gen = Rcpp::wrap(f_Yi_r_NA_by0(Yi));
    return rcpp_result_gen;
END_RCPP
}
// YiNui
arma::vec YiNui(int nD, arma::mat matrixP, arma::vec& tau, arma::vec& tau_i, double DeltaT, arma::mat& Yi, arma::mat& x0i, arma::colvec& alpha_mu0, arma::mat& xi, arma::colvec& alpha_mu, arma::mat& G_mat_A_0_to_tau_i);
RcppExport SEXP _DynNet_YiNui(SEXP nDSEXP, SEXP matrixPSEXP, SEXP tauSEXP, SEXP tau_iSEXP, SEXP DeltaTSEXP, SEXP YiSEXP, SEXP x0iSEXP, SEXP alpha_mu0SEXP, SEXP xiSEXP, SEXP alpha_muSEXP, SEXP G_mat_A_0_to_tau_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nD(nDSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type matrixP(matrixPSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_i(tau_iSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0i(x0iSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_mu0(alpha_mu0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G_mat_A_0_to_tau_i(G_mat_A_0_to_tau_iSEXP);
    rcpp_result_gen = Rcpp::wrap(YiNui(nD, matrixP, tau, tau_i, DeltaT, Yi, x0i, alpha_mu0, xi, alpha_mu, G_mat_A_0_to_tau_i));
    return rcpp_result_gen;
END_RCPP
}
// f_marker
double f_marker(arma::mat& Lambdai, int nD, arma::mat matrixP, arma::vec& tau, arma::vec& tau_i, double DeltaT, arma::mat& Ytildi, arma::mat& YtildPrimi, arma::mat& x0i, arma::colvec& alpha_mu0, arma::mat& xi, arma::vec& paraSig, arma::colvec& alpha_mu, arma::mat& G_mat_A_0_to_tau_i, arma::colvec& paraEtha2, arma::vec& if_link, arma::colvec& zitr, arma::mat& ide, arma::vec& paras_k, arma::vec& K2_lambda_t, arma::vec& K2_lambda);
RcppExport SEXP _DynNet_f_marker(SEXP LambdaiSEXP, SEXP nDSEXP, SEXP matrixPSEXP, SEXP tauSEXP, SEXP tau_iSEXP, SEXP DeltaTSEXP, SEXP YtildiSEXP, SEXP YtildPrimiSEXP, SEXP x0iSEXP, SEXP alpha_mu0SEXP, SEXP xiSEXP, SEXP paraSigSEXP, SEXP alpha_muSEXP, SEXP G_mat_A_0_to_tau_iSEXP, SEXP paraEtha2SEXP, SEXP if_linkSEXP, SEXP zitrSEXP, SEXP ideSEXP, SEXP paras_kSEXP, SEXP K2_lambda_tSEXP, SEXP K2_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Lambdai(LambdaiSEXP);
    Rcpp::traits::input_parameter< int >::type nD(nDSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type matrixP(matrixPSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_i(tau_iSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ytildi(YtildiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type YtildPrimi(YtildPrimiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0i(x0iSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_mu0(alpha_mu0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type paraSig(paraSigSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G_mat_A_0_to_tau_i(G_mat_A_0_to_tau_iSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type paraEtha2(paraEtha2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type if_link(if_linkSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type zitr(zitrSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type ide(ideSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type paras_k(paras_kSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type K2_lambda_t(K2_lambda_tSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type K2_lambda(K2_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(f_marker(Lambdai, nD, matrixP, tau, tau_i, DeltaT, Ytildi, YtildPrimi, x0i, alpha_mu0, xi, paraSig, alpha_mu, G_mat_A_0_to_tau_i, paraEtha2, if_link, zitr, ide, paras_k, K2_lambda_t, K2_lambda));
    return rcpp_result_gen;
END_RCPP
}
// matNui_ui
arma::vec matNui_ui(int nD, arma::vec& tau_i, double DeltaT, arma::mat& x0i, arma::colvec& alpha_mu0, arma::mat& xi, arma::colvec& alpha_mu, arma::mat& G_mat_A_0_to_tau_i, arma::vec& randomeffects, arma::mat& zi, bool ordered);
RcppExport SEXP _DynNet_matNui_ui(SEXP nDSEXP, SEXP tau_iSEXP, SEXP DeltaTSEXP, SEXP x0iSEXP, SEXP alpha_mu0SEXP, SEXP xiSEXP, SEXP alpha_muSEXP, SEXP G_mat_A_0_to_tau_iSEXP, SEXP randomeffectsSEXP, SEXP ziSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nD(nDSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_i(tau_iSEXP);
    Rcpp::traits::input_parameter< double >::type DeltaT(DeltaTSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0i(x0iSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_mu0(alpha_mu0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G_mat_A_0_to_tau_i(G_mat_A_0_to_tau_iSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type randomeffects(randomeffectsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type zi(ziSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(matNui_ui(nD, tau_i, DeltaT, x0i, alpha_mu0, xi, alpha_mu, G_mat_A_0_to_tau_i, randomeffects, zi, ordered));
    return rcpp_result_gen;
END_RCPP
}
// VecToMat
arma::mat VecToMat(arma::vec& y, int K, int m_i);
RcppExport SEXP _DynNet_VecToMat(SEXP ySEXP, SEXP KSEXP, SEXP m_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type m_i(m_iSEXP);
    rcpp_result_gen = Rcpp::wrap(VecToMat(y, K, m_i));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DynNet_Loglik", (DL_FUNC) &_DynNet_Loglik, 44},
    {"_DynNet_Loglik2", (DL_FUNC) &_DynNet_Loglik2, 45},
    {"_DynNet_pred", (DL_FUNC) &_DynNet_pred, 28},
    {"_DynNet_pred_bis", (DL_FUNC) &_DynNet_pred_bis, 26},
    {"_DynNet_pred0", (DL_FUNC) &_DynNet_pred0, 25},
    {"_DynNet_vectorise", (DL_FUNC) &_DynNet_vectorise, 1},
    {"_DynNet_KmatDiag", (DL_FUNC) &_DynNet_KmatDiag, 1},
    {"_DynNet_DparChol", (DL_FUNC) &_DynNet_DparChol, 2},
    {"_DynNet_vecaijt", (DL_FUNC) &_DynNet_vecaijt, 4},
    {"_DynNet_ConstrA", (DL_FUNC) &_DynNet_ConstrA, 5},
    {"_DynNet_GmatA0totaui", (DL_FUNC) &_DynNet_GmatA0totaui, 5},
    {"_DynNet_ProdA", (DL_FUNC) &_DynNet_ProdA, 6},
    {"_DynNet_GmatprodAstotau", (DL_FUNC) &_DynNet_GmatprodAstotau, 6},
    {"_DynNet_tsGmatprodA0totau", (DL_FUNC) &_DynNet_tsGmatprodA0totau, 5},
    {"_DynNet_compoYiNA", (DL_FUNC) &_DynNet_compoYiNA, 1},
    {"_DynNet_YiwoNA", (DL_FUNC) &_DynNet_YiwoNA, 1},
    {"_DynNet_matNui", (DL_FUNC) &_DynNet_matNui, 8},
    {"_DynNet_matYtild_ui", (DL_FUNC) &_DynNet_matYtild_ui, 11},
    {"_DynNet_f_Yi_r_NA_by0", (DL_FUNC) &_DynNet_f_Yi_r_NA_by0, 1},
    {"_DynNet_YiNui", (DL_FUNC) &_DynNet_YiNui, 11},
    {"_DynNet_f_marker", (DL_FUNC) &_DynNet_f_marker, 21},
    {"_DynNet_matNui_ui", (DL_FUNC) &_DynNet_matNui_ui, 11},
    {"_DynNet_VecToMat", (DL_FUNC) &_DynNet_VecToMat, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_DynNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
